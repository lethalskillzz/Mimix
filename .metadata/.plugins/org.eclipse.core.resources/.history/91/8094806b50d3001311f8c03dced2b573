package com.lethalsys.mimix;


import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.SystemClock;
import android.widget.Toast;


@SuppressWarnings("deprecation")
public class PostMonitor extends Service {

	AtomicBoolean isActive=new AtomicBoolean(true);	
	//public static Boolean  isActive = true;
	static int POLL_PERIOD = 60000;
	static int HLF_POLL_PERIOD = 15000;
	public static Handler   PostMonitorHandler    = null;

	private Set<Long> seenStatus=new HashSet<Long>();

	public static final int NOTIFICATION_ID=1337;

	String iresponse;
	String UserID;

	UseID_Database uidhelper;

	PostDatabase helper=null;
	Cursor model=null;

	JSONArray data = null;

	public static ConnectivityManager mConnectivityManager;
	public static NetworkInfo mNetworkInfo;

	@Override
	public void onCreate() {
		super.onCreate();

		uidhelper=new UseID_Database(this);
		UserID = uidhelper.getID();

		helper=new PostDatabase(this);

		//Toast.makeText(this, "Congrats! MyService Created", Toast.LENGTH_LONG).show();
		new Thread(threadBody).start();	

	}




	@Override
	public IBinder onBind(Intent intent) {
		return(null);
	}


	@Override
	public void onDestroy() {
		super.onDestroy();

		isActive.set(false);
	}


	private Runnable threadBody=new Runnable() {
		public void run() {
			while (isActive.get()) {


				SystemClock.sleep(POLL_PERIOD);	
				if(null == HomeActivity.mUiHandler)
				{
					//SystemClock.sleep(POLL_PERIOD);
					//poll();
				}

				if(null != AllContactsActivity.allcUiHandler)
				{

					Message msgToActivity = new Message();
					msgToActivity.what = 1;
					AllContactsActivity.allcUiHandler.sendMessage(msgToActivity);

				}


				if(null != MessageListActivity.msglUiHandler)
				{

					Message msgToActivity = new Message();
					msgToActivity.what = 1;
					MessageListActivity.msglUiHandler.sendMessage(msgToActivity);
				}



				/*if(null != HomeActivity.mUiHandler)
{

    Message msgToActivity = new Message();
    msgToActivity.what = 1;
    HomeActivity.mUiHandler.sendMessage(msgToActivity);

}*/



			}
		}
	};

	private void poll() {

		mConnectivityManager= (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
		mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();

		if (mNetworkInfo != null && mNetworkInfo.isConnectedOrConnecting())
		{

			new MyAsyncTask().execute("get_post");
		}
		else
		{
			Toast.makeText(this, "Network Error: No Internet Connection", Toast.LENGTH_LONG).show();
		}	
	}



	private class MyAsyncTask extends AsyncTask<String, Integer, Double>{
		@Override
		protected Double doInBackground(String... params) {
			// TODO Auto-generated method stub
			postData(params[0]);
			return null;
		}

		protected void onPostExecute(Double result){

			//Toast.makeText(getApplicationContext(), iresponse.trim(), Toast.LENGTH_LONG).show();
			if(iresponse.trim().length()!=0)
			{
				//helper.Clear();

				try{
					JSONObject jsonObj = new JSONObject(iresponse.trim());

					data = jsonObj.getJSONArray("posts");

					if(data!=null)
					{


						for(int i=0;i<data.length();i++)
						{
							JSONObject c = data.getJSONObject(i);
							String usrname = c.getString("username");
							String stamp = c.getString("stamp");
							String userid = c.getString("userid");
							String body = c.getString("body");
							String pid = c.getString("pid");

							if (!seenStatus.contains(Long.parseLong(pid))) {
								// found a new one!
								//helper.insert(usrname,body,stamp);
								seenStatus.add(Long.parseLong(pid));
								if(userid!=UserID)
								{
									//sendmsg();
									if(null == HomeActivity.mUiHandler)
									{
										//showNotification();
									}

								} 	

							}


							//model.requery();
						}

					}
				} catch (JSONException e){

				}




			}


			//Toast.makeText(getApplicationContext(),iresponse.trim() , Toast.LENGTH_LONG).show();


		}


		protected void onProgressUpdate(Integer... progress)
		{

		}

		protected void postData(String Header) {
			// Create a new HttpClient and Post Header
			HttpClient httpclient = new DefaultHttpClient();
			HttpPost httppost;

			 httppost = new HttpPost("http://10.0.2.2/Twitter-Engine/add_get_post.php");
			 //httppost = new HttpPost("http://route.pixub.com/add_get_post.php");

			try {

				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("PacketHead",Header ));
				nameValuePairs.add(new BasicNameValuePair("UID", UserID ));
				//nameValuePairs.add(new BasicNameValuePair("post_body", PostBody));
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				ResponseHandler<String> responseHandler = new BasicResponseHandler();


				// Execute HTTP Post Request
				iresponse = httpclient.execute(httppost, responseHandler);




			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				cancel(true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
			}


		}

	}


	private void showNotification() {
		final NotificationManager mgr=
				(NotificationManager)getSystemService(NOTIFICATION_SERVICE);
		Notification note=new Notification(R.drawable.ic_launcher,
				"New post!",
				System.currentTimeMillis());
		Intent i=new Intent(this, HomeActivity.class);
		i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|
				Intent.FLAG_ACTIVITY_SINGLE_TOP);
		PendingIntent pi=PendingIntent.getActivity(this, 0,
				i,
				0);
		note.setLatestEventInfo(this, "Notification!",
				"New posts",
				pi);
		mgr.notify(NOTIFICATION_ID, note);
	}







	public void sendmsg()
	{

		PostMonitorHandler = new Handler();

		if(null != HomeActivity.mUiHandler)
		{
			//first build the message and send.
			//put a integer value here and get it from the Activity handler
			//For Example: lets use 0 (msg.what = 0;)
			//for receiving service running status in the activity
			Message msgToActivity = new Message();
			msgToActivity.what = 0;
			HomeActivity.mUiHandler.sendMessage(msgToActivity);
		} 
	}






}