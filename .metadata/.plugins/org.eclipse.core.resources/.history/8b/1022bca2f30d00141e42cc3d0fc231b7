package com.lethalsys.mimix;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CursorAdapter;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

@SuppressWarnings("deprecation")
public class MessageActivity extends Activity {

	public final static String T_DETAIL = "com.lethalsys.mimix.TARGETDETAIL";
	
	private Set<Long> seenmsg=new HashSet<Long>();
	AtomicBoolean isnewmsg=new AtomicBoolean(false);	
	
	//private com.lethalsys.http_req_test.message_array_adapter adapter;
	private ListView lv;
	EditText msgedit;
	private ImageButton msgsend;
	
	

	private String iresponse;
	private String UserID;
	private String TargetName;
	private String Cpymsg;

	UseID_Database uidhelper=null;

	public static Handler msgUiHandler = null;

	Cursor model=null;
	PostDatabaseAdapter adapter =null;
	PostDatabase helper=null;

	JSONArray data = null;
	
	public static Boolean msgactv = false;

	public static ConnectivityManager mConnectivityManager;
	public static NetworkInfo mNetworkInfo;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_message);

		Intent intent = getIntent();
		TargetName = intent.getStringExtra(ProfileActivity.T_DETAIL);
		if(TargetName==null)
		{
			TargetName = intent.getStringExtra(MessageListActivity.MSGUSRNAME);
		}
		setTitle(TargetName);

		uidhelper=new UseID_Database(this);
		UserID = uidhelper.getID();


		helper=new PostDatabase(this);


		lv = (ListView) findViewById(R.id.msglistView);
		lv.setDivider(null);

		msgsend=(ImageButton)findViewById(R.id.msgsendbtn);
		 //msgsend.setEnabled(false);
		 msgsend.setVisibility(View.GONE);
		 
		
		mConnectivityManager= (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
		mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();

		if (mNetworkInfo != null && mNetworkInfo.isConnectedOrConnecting())
		{

			helper.ClearMsg();
			new MyAsyncTask().execute("get_msg");	    	
		}
		else
		{
			//Toast.makeText(this, "Network Error: No Internet Connection", Toast.LENGTH_LONG).show();
			ShowNoNetErrorDialoag();
		}	



		model=helper.getAllMsg();
		startManagingCursor(model);
		adapter=new PostDatabaseAdapter(model);
		lv.setAdapter(adapter);

		//adapter = new message_array_adapter(getApplicationContext(), R.layout.message_bubble);
		msgedit = (EditText) findViewById(R.id.msgeditText);
		msgedit.addTextChangedListener(watch);

		/*msgedit.setOnKeyListener(new OnKeyListener() {
		public boolean onKey(View v, int keyCode, KeyEvent event) {
			// If the event is a key-down event on the "enter" button
			if ((event.getAction() == KeyEvent.ACTION_DOWN) && (keyCode == KeyEvent.KEYCODE_ENTER)) {
				// Perform action on key press
				//adapter.add(new OneMsg(false, msgedit.getText().toString()));
				Cpymsg = msgedit.getText().toString();
				msgedit.setText("");

				Send_IMessage(v);


				return true;
			}
			return false;
		}
	});*/

		msgUiHandler = new Handler() // Receive messages from service class
		{
			public void handleMessage(Message msg)
			{
				switch(msg.what)
				{
				case 0:
				{
					// model.requery();
					//Toast.makeText(getApplicationContext(), "msg rcvd", Toast.LENGTH_LONG).show();
				}
				break;

				case 1:
				{
					Get_IMessage(); 
				}
				break;

				default:
					break;
				}
			}
		};
	}


	
	public void onResume()
	{
		super.onResume();
		msgactv =  true;
		
	}
	
	
	@Override
	public void onPause() {
	super.onPause();
	msgactv =  false;
	}
	

	public void Get_IMessage()
	{
		//Cpymsg = msgedit.getText().toString();
		//msgedit.setText("");

		mConnectivityManager= (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
		mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();

		if (mNetworkInfo != null && mNetworkInfo.isConnectedOrConnecting())
		{

			new MyAsyncTask().execute("get_msg");     	
		}
		else
		{
			//Toast.makeText(this, "Network Error: No Internet Connection", Toast.LENGTH_LONG).show();
			ShowNoNetErrorDialoag();
		}	
	}

	

	public void Send_IMessage(View v)
	{
		if(msgedit.getText().toString().length()<1){
			//Toast.makeText(this, "Empty", Toast.LENGTH_LONG).show();

		}
		else
		{
			Cpymsg = msgedit.getText().toString();
				
			msgedit.setText("");
		
			
			View row=getLayoutInflater().inflate(R.layout.message_bubble,(ViewGroup)findViewById(R.id.msglistView));//findViewById(R.layout.message_bubble).getParent(), false);
			
			/*TextView set_temp_msg=(TextView)findViewById(R.id.txt_msg);
		    LinearLayout set_temp_wrapper=(LinearLayout)findViewById(R.id.wrapper);*/
			
			PostDatabaseHolder holder=new PostDatabaseHolder(row);
			row.setTag(holder);
			holder.msg_body.setText(Cpymsg);
			holder.msg_body.setBackgroundResource(R.drawable.bubble_green);
			holder.wrapper.setGravity(Gravity.RIGHT);
		    /*set_temp_msg.setText(Cpymsg);
			
			set_temp_msg.setBackgroundResource(false ? R.drawable.bubble_yellow : R.drawable.bubble_green);
			set_temp_wrapper.setGravity(false ? Gravity.LEFT : Gravity.RIGHT);*/
			

			mConnectivityManager= (ConnectivityManager) this.getSystemService(Context.CONNECTIVITY_SERVICE);
			mNetworkInfo = mConnectivityManager.getActiveNetworkInfo();

			if (mNetworkInfo != null && mNetworkInfo.isConnectedOrConnecting())
			{

				new MyAsyncTask().execute("add_msg");    	
			}
			else
			{
				//Toast.makeText(this, "Network Error: No Internet Connection", Toast.LENGTH_LONG).show();
				ShowNoNetErrorDialoag();
			}
		}
	}


	/*@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.message, menu);
		return true;
	}*/


	
	   TextWatcher watch = new TextWatcher(){
		   @Override
		   public void afterTextChanged(Editable arg0) {
		     // TODO Auto-generated method stub
			  
		   }
		   @Override
		   public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
		       int arg3) {
		     // TODO Auto-generated method stub
			   
		   }
		   @Override
		   public void onTextChanged(CharSequence s, int a, int b, int c) {
		     // TODO Auto-generated method stub
			   if(s.length() > 0 && s.toString().trim().length() >= 0 )
			   {
				   msgsend.setVisibility(View.VISIBLE);
			   }
			   else
			   {
				   msgsend.setVisibility(View.GONE);
			   }
		  
		   }};
	
	

	private class MyAsyncTask extends AsyncTask<String, Integer, Double>{

		@Override
		protected Double doInBackground(String... params) {
			// TODO Auto-generated method stub
			postData(params[0]);
			return null;
		}


		@Override
		protected void onPreExecute() {
			super.onPreExecute();


			/* pDialog = new ProgressDialog(HomeActivity.this);
    			pDialog.setMessage("loding posts...");
    			pDialog.setIndeterminate(false);
    			pDialog.setCancelable(true);
    			pDialog.show();*/
		}


		protected void onPostExecute(Double result){
			if(null!=iresponse)
    		{
				
			if(iresponse.trim().length()!=0)
			{
				if("Post added".compareTo(iresponse.trim())==0)
				{
					Toast.makeText(getApplicationContext(),iresponse.trim() , Toast.LENGTH_LONG).show();
				}

				else if("Error: Unable to add post".compareTo(iresponse.trim())==0)
				{
					Toast.makeText(getApplicationContext(),iresponse.trim() , Toast.LENGTH_LONG).show();
				}
				else

					try{
						JSONObject jsonObj = new JSONObject(iresponse.trim());

						data = jsonObj.getJSONArray("msgs");

						if(data!=null)
						{
							
							helper.ClearMsg();

							for(int i=0;i<data.length();i++)
							{
								JSONObject c = data.getJSONObject(i);
								String stamp = c.getString("stamp");
								String userid = c.getString("userid");
								String msgbody = c.getString("msgbody");
								String mid = c.getString("mid");
								
			          
			                	if (!seenmsg.contains(Long.parseLong(mid))) {            		
				                seenmsg.add(Long.parseLong(mid)); 
				                
			                  	if(isnewmsg.get() == false)
			                	{
			                  		isnewmsg.set(true);
			                	}
			                	}
				                	
								if(UserID.compareTo(userid)==0)
								{
									helper.insertMsg("me",msgbody,stamp);
								}
								else
								{
									helper.insertMsg("friend",msgbody,stamp);
								}
								
								
			                		
			                	
							}
							
							if(isnewmsg.get() != false)
		                	{
								model.requery();
		                	}
						}

					} catch (JSONException e){

					}
				//seenmsg.clear();
				isnewmsg.set(false);
				//showNotification();
				//pDialog.dismiss();
				//confirmFireMissiles();
				

			}


    		}


			//Toast.makeText(getApplicationContext(),iresponse.trim() , Toast.LENGTH_LONG).show();
			//confirmFireMissiles();


		}


		protected void onProgressUpdate(Integer... progress){
			//pb.setProgress(progress[0]);
		}

		protected void postData(String Header) {
			// Create a new HttpClient and Post Header
			HttpParams httpparameters = new BasicHttpParams();
		    HttpConnectionParams.setConnectionTimeout(httpparameters,LoginActivity.conntimeout);
		    HttpConnectionParams.setSoTimeout(httpparameters,LoginActivity.socktimeout);
		    
			DefaultHttpClient httpclient = new DefaultHttpClient();
			httpclient.setParams(httpparameters);
			
			HttpPost httppost = new HttpPost(/*"http://10.0.2.2/Twitter-Engine/*/LoginActivity.SERVER+"imessanger.php");
			//HttpPost httppost = new HttpPost("http://route.pixub.com/imessanger.php");


			//String Header = "get_post";

			try { 
				// Add your data

				List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
				nameValuePairs.add(new BasicNameValuePair("PacketHead",Header ));
				nameValuePairs.add(new BasicNameValuePair("UID", UserID ));
				nameValuePairs.add(new BasicNameValuePair("Target_Name",  TargetName));
				if(Header.compareTo("add_msg")==0)
				{
				nameValuePairs.add(new BasicNameValuePair("msg_body",Cpymsg));
				Cpymsg = null;
				}
				httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
				ResponseHandler<String> responseHandler = new BasicResponseHandler();
				
	
				

				//HttpResponse response;


				// Execute HTTP Post Request
				iresponse = httpclient.execute(httppost, responseHandler);




			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				Toast.makeText(getApplicationContext(), "Network Error!", Toast.LENGTH_LONG).show();
				cancel(true);
			} catch (IOException e) {
				// TODO Auto-generated catch block
			}


		}

	}

	
	
    @SuppressLint("ValidFragment")
	public class NetworkErrorDialogFragment extends DialogFragment {
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            // Use the Builder class for convenient dialog construction
            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setMessage(LoginActivity.neterrormsg)
                   .setPositiveButton("Retry", new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int id) {
                           // FIRE ZE MISSILES!
                       }
                   })
                   .setNegativeButton("cancel", new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int id) {
                           // User cancelled the dialog
                       }
                   });
            // Create the AlertDialog object and return it
            return builder.create();
        }
    }
    
    
	public void ShowErrorDialoag() {
	    DialogFragment newFragment = new NetworkErrorDialogFragment();
	    newFragment.show(getFragmentManager(), "neterror");
	}
    
	
	
    @SuppressLint("ValidFragment")
	public class NoNetErrorDialogFragment extends DialogFragment {
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            // Use the Builder class for convenient dialog construction
            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
            builder.setMessage(LoginActivity.noneterrormsg)
                   .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int id) {
                    	  
                       }
                   });
                  
            // Create the AlertDialog object and return it
            return builder.create();
        }
    }
    
    
	public void ShowNoNetErrorDialoag() {
	    DialogFragment newFragment = new NetworkErrorDialogFragment();
	    newFragment.show(getFragmentManager(), "noneterror");
	}
	




	class PostDatabaseAdapter extends CursorAdapter {


		PostDatabaseAdapter(Cursor c) {
			super(MessageActivity.this,c);
		}
		@Override
		public void bindView(View row, Context ctxt,Cursor c) {
			PostDatabaseHolder holder=(PostDatabaseHolder)row.getTag();
			holder.populateFrom(c, helper);
		}
		@Override
		public View newView(Context ctxt, Cursor c,	ViewGroup parent) {
			LayoutInflater inflater=getLayoutInflater();
			View row=inflater.inflate(R.layout.message_bubble, parent, false);
			PostDatabaseHolder holder=new PostDatabaseHolder(row);
			row.setTag(holder);
			return(row);
		}

	}    





	    static class PostDatabaseHolder {
		private TextView msg_body=null;
		//private TextView date_time=null;
		private View row=null;
		private LinearLayout wrapper;
		PostDatabaseHolder(View row) {
			this.row=row;

			msg_body=(TextView)row.findViewById(R.id.txt_msg);
			//date_time=(TextView)row.findViewById(R.id.row_date_time);
			wrapper =  (LinearLayout) row.findViewById(R.id.wrapper);
		}


		void populateFrom(Cursor c, PostDatabase helper) {
			msg_body.setText(helper.getMsgBody(c));
			//date_time.setText(helper.getDate(c));
			if("friend".compareTo(helper.getWho(c))==0)
			{
				msg_body.setBackgroundResource(true ? R.drawable.bubble_yellow : R.drawable.bubble_green);
				wrapper.setGravity(true ? Gravity.LEFT : Gravity.RIGHT);
			}
			else
			{
				msg_body.setBackgroundResource(false ? R.drawable.bubble_yellow : R.drawable.bubble_green);
				wrapper.setGravity(false ? Gravity.LEFT : Gravity.RIGHT);
			}
		}
	}   




	public void confirmFireMissiles() {
		DialogFragment newFragment = new FireMissilesDialogFragment();
		newFragment.show(getFragmentManager(), "missiles");
	}


	@SuppressLint("ValidFragment")
	public class FireMissilesDialogFragment extends DialogFragment {
		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the Builder class for convenient dialog construction
			AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
			builder.setMessage(iresponse.trim())
			.setPositiveButton("ok", new DialogInterface.OnClickListener() {
				public void onClick(DialogInterface dialog, int id) {
					// FIRE ZE MISSILES!
				}
			});
			/*.setNegativeButton("cancel", new DialogInterface.OnClickListener() {
                   public void onClick(DialogInterface dialog, int id) {
                       // User cancelled the dialog
                   }
               });*/
			// Create the AlertDialog object and return it
			return builder.create();
		}
	}



}



